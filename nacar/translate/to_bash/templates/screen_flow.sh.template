# ───── Screen flow ────────────────────────────────────────────────────────────

declare -a BREADCRUMBS=()
# The name of the screen to show. One of the `_SCREEN` constants below.
ACTIVE_SCREEN=""
# The command to invoke on exit.
INVOKE_ON_EXIT=""

{% for screen in screen_flow.screens %}
readonly {{ screen.upper() }}_SCREEN="{{ screen.lower() }}"
{% endfor %}

navigate_to() {
    INVOKE_ON_EXIT=""
    ACTIVE_SCREEN="$1"
    BREADCRUMBS+=("$1")
}

# Remove last element of BREADCRUMBS.
navigate_back() {
{% raw %}    if [[ ${#BREADCRUMBS[@]} -eq 1 ]]; then{% endraw +%}
        :  # Prevent navigating back when on homescreen.
    else
        unset 'BREADCRUMBS[-1]'  # Remove current screen.
        local previous_screen=${BREADCRUMBS[-1]}
        # Remove previous screen since it will be added back by `navigate_to`.
        unset 'BREADCRUMBS[-1]'
        navigate_to ${previous_screen}
    fi
}

show_active_screen() {
    # There should always be an active screen, exit if not.
    if [[ ! ${ACTIVE_SCREEN} ]]; then return 1; fi

    clear_screen
    eval "show_${ACTIVE_SCREEN}_screen"
}

# @param $1 The screen this function is invoked from.
#           One of the _SCREEN constants declared above.
check_keystroke() {
    local prompt=" ${GRN}\$${END}"
    read -rs -p " ${prompt} " -n1 key

{# Dynamically build case statements on a per-screen basis #}
{# to handle keystrokes indicating option selection.       #}
    # Keypresses related to a screen.
    {% for screen in screen_flow.screens %}
    {{ 'if' if loop.first else 'elif' }} [[ "$1" == "${{screen.upper()}}_SCREEN" ]]; then
    {# Loop over the actions and/or links defined for this screen. #}
        case "$key" in
        {% for option in screen_flow.screen_options[screen] %}
            {% set key = option['name'][0] %}
            "{{ key.upper() }}" | "{{ key.lower() }}")
            {% if 'link' in option %}
                navigate_to ${{option['link'].upper()}}_SCREEN; return 0;;
            {% elif 'action' in option %}
                INVOKE_ON_EXIT="{{option['action']}}"; return 1;;
            {% endif %}
        {% endfor %}
        esac

    {% if loop.last %}
    fi
    {% endif %}
    {% endfor %}

    # Handle [ESC] key and left arrow.
    # [unix.stackexchange.com/a/179193]
    case "$key" in
        $'\x1b')  # Handle ESC sequence.
            read -rsn1 -t 0.1 additional_bytes
            if [[ "$additional_bytes" == "[" ]]; then
                read -rsn1 -t 0.1 additional_bytes
                case "$additional_bytes" in
                    "D")  # Left arrow.
                        navigate_back; return 0;;
                    *)  # Other escape sequences.
                        return 0;;
                esac
            fi;;
        *)  # Other single byte (char) cases.
            return 0;;
    esac

    # Default fallthrough.
    return 1
}
